diff --git a/gradio/networking.py b/gradio/networking.py
index b216f019..89cd9d72 100644
--- a/gradio/networking.py
+++ b/gradio/networking.py
@@ -156,6 +156,12 @@ def start_server(
 
     app = App.create_app(blocks, app_kwargs=app_kwargs)
 
+    uds = None
+    if host.startswith("/"):
+        uds = host
+        host = None
+        server_port = 0
+
     server_ports = (
         [server_port]
         if server_port is not None
@@ -164,15 +170,16 @@ def start_server(
 
     for port in server_ports:
         try:
-            # The fastest way to check if a port is available is to try to bind to it with socket.
-            # If the port is not available, socket will throw an OSError.
-            s = socket.socket()
-            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
-            # Really, we should be checking if (server_name, server_port) is available, but
-            # socket.bind() doesn't seem to throw an OSError with ipv6 addresses, based on my testing.
-            # Instead, we just check if the port is available on localhost.
-            s.bind((LOCALHOST_NAME, port))
-            s.close()
+            if host is not None:
+                # The fastest way to check if a port is available is to try to bind to it with socket.
+                # If the port is not available, socket will throw an OSError.
+                s = socket.socket()
+                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
+                # Really, we should be checking if (server_name, server_port) is available, but
+                # socket.bind() doesn't seem to throw an OSError with ipv6 addresses, based on my testing.
+                # Instead, we just check if the port is available on localhost.
+                s.bind((LOCALHOST_NAME, port))
+                s.close()
 
             # To avoid race conditions, so we also check if the port by trying to start the uvicorn server.
             # If the port is not available, this will throw a ServerFailedToStartError.
@@ -180,6 +187,7 @@ def start_server(
                 app=app,
                 port=port,
                 host=host,
+                uds=uds,
                 log_level="warning",
                 ssl_keyfile=ssl_keyfile,
                 ssl_certfile=ssl_certfile,
